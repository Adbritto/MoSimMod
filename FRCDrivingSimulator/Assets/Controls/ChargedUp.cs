//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/ChargedUp.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ChargedUp: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ChargedUp()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ChargedUp"",
    ""maps"": [
        {
            ""name"": ""Robot"",
            ""id"": ""51604950-bf74-462c-9b40-6dfe52bfe781"",
            ""actions"": [
                {
                    ""name"": ""Translate"",
                    ""type"": ""Value"",
                    ""id"": ""0dc60bd8-112e-4074-b7db-dbdd2617be68"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""67e41dd5-76a1-4630-b489-9afd3ed8651e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""High"",
                    ""type"": ""Button"",
                    ""id"": ""5d8d5940-afc4-4b03-ade1-5e2b9eb683f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mid"",
                    ""type"": ""Button"",
                    ""id"": ""afd691fc-081c-4ac9-9243-ec32d1968b4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Low"",
                    ""type"": ""Button"",
                    ""id"": ""c601738b-6a7f-47ca-8add-1ccd3f65b26f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""f797c87f-5f7b-45f8-bc2f-9765a8df6d52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Intake"",
                    ""type"": ""Button"",
                    ""id"": ""c59f1971-4ac9-4519-beb2-da8de8e36e11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stow"",
                    ""type"": ""Button"",
                    ""id"": ""9cc57796-6f05-41e9-b7cf-36a40e948aaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e97bd13a-aa2c-4887-833d-20b09832d076"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""5b8af91b-e9ff-4c62-8ac0-d562de4865c6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Translate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7fd5aec2-3370-4a0b-9150-45b4d608e703"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""33fa4097-f04e-43bd-b2a6-026808d13209"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ab49eaad-a78f-46f5-a2bb-c3bf9b748b04"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c772d92-4f23-4587-a4d8-be097168c9be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42cbda15-eb61-497e-9080-35de44ec8862"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 2"",
                    ""action"": ""Translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dc5536c-16db-49c2-bb7e-9a9f32ad3b8f"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 2"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfd3f42f-1282-486b-a2eb-40e972825423"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd7c6265-59f7-4dac-b806-69c2a594de37"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f9fff20-701f-4174-9fdb-48d361b60e6f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""436c336b-4b83-482f-b054-008f1e423cfa"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d950f8-0a4d-41ce-8857-715eb629909a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 2"",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""136745b3-d966-40ec-8967-8608098d2948"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fc5cbc5-4cce-481c-91b5-df77faffa8b4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Low"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a42060b-0f9c-46a4-a0ae-f75c98b200c8"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Mid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7afd6057-022f-48d3-b0f2-eaf886eac781"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""High"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a90652a4-002c-45bd-82e0-950264415bc9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Intake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37ca475b-9f0c-46aa-8cbc-dd4751509000"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Intake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ea0cdb6-d757-41b8-b2fc-fd0a6161dc8b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls 1"",
                    ""action"": ""Stow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controls 1"",
            ""bindingGroup"": ""Controls 1"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controls 2"",
            ""bindingGroup"": ""Controls 2"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Robot
        m_Robot = asset.FindActionMap("Robot", throwIfNotFound: true);
        m_Robot_Translate = m_Robot.FindAction("Translate", throwIfNotFound: true);
        m_Robot_Rotate = m_Robot.FindAction("Rotate", throwIfNotFound: true);
        m_Robot_High = m_Robot.FindAction("High", throwIfNotFound: true);
        m_Robot_Mid = m_Robot.FindAction("Mid", throwIfNotFound: true);
        m_Robot_Low = m_Robot.FindAction("Low", throwIfNotFound: true);
        m_Robot_Lift = m_Robot.FindAction("Lift", throwIfNotFound: true);
        m_Robot_Intake = m_Robot.FindAction("Intake", throwIfNotFound: true);
        m_Robot_Stow = m_Robot.FindAction("Stow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Robot
    private readonly InputActionMap m_Robot;
    private List<IRobotActions> m_RobotActionsCallbackInterfaces = new List<IRobotActions>();
    private readonly InputAction m_Robot_Translate;
    private readonly InputAction m_Robot_Rotate;
    private readonly InputAction m_Robot_High;
    private readonly InputAction m_Robot_Mid;
    private readonly InputAction m_Robot_Low;
    private readonly InputAction m_Robot_Lift;
    private readonly InputAction m_Robot_Intake;
    private readonly InputAction m_Robot_Stow;
    public struct RobotActions
    {
        private @ChargedUp m_Wrapper;
        public RobotActions(@ChargedUp wrapper) { m_Wrapper = wrapper; }
        public InputAction @Translate => m_Wrapper.m_Robot_Translate;
        public InputAction @Rotate => m_Wrapper.m_Robot_Rotate;
        public InputAction @High => m_Wrapper.m_Robot_High;
        public InputAction @Mid => m_Wrapper.m_Robot_Mid;
        public InputAction @Low => m_Wrapper.m_Robot_Low;
        public InputAction @Lift => m_Wrapper.m_Robot_Lift;
        public InputAction @Intake => m_Wrapper.m_Robot_Intake;
        public InputAction @Stow => m_Wrapper.m_Robot_Stow;
        public InputActionMap Get() { return m_Wrapper.m_Robot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RobotActions set) { return set.Get(); }
        public void AddCallbacks(IRobotActions instance)
        {
            if (instance == null || m_Wrapper.m_RobotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RobotActionsCallbackInterfaces.Add(instance);
            @Translate.started += instance.OnTranslate;
            @Translate.performed += instance.OnTranslate;
            @Translate.canceled += instance.OnTranslate;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @High.started += instance.OnHigh;
            @High.performed += instance.OnHigh;
            @High.canceled += instance.OnHigh;
            @Mid.started += instance.OnMid;
            @Mid.performed += instance.OnMid;
            @Mid.canceled += instance.OnMid;
            @Low.started += instance.OnLow;
            @Low.performed += instance.OnLow;
            @Low.canceled += instance.OnLow;
            @Lift.started += instance.OnLift;
            @Lift.performed += instance.OnLift;
            @Lift.canceled += instance.OnLift;
            @Intake.started += instance.OnIntake;
            @Intake.performed += instance.OnIntake;
            @Intake.canceled += instance.OnIntake;
            @Stow.started += instance.OnStow;
            @Stow.performed += instance.OnStow;
            @Stow.canceled += instance.OnStow;
        }

        private void UnregisterCallbacks(IRobotActions instance)
        {
            @Translate.started -= instance.OnTranslate;
            @Translate.performed -= instance.OnTranslate;
            @Translate.canceled -= instance.OnTranslate;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @High.started -= instance.OnHigh;
            @High.performed -= instance.OnHigh;
            @High.canceled -= instance.OnHigh;
            @Mid.started -= instance.OnMid;
            @Mid.performed -= instance.OnMid;
            @Mid.canceled -= instance.OnMid;
            @Low.started -= instance.OnLow;
            @Low.performed -= instance.OnLow;
            @Low.canceled -= instance.OnLow;
            @Lift.started -= instance.OnLift;
            @Lift.performed -= instance.OnLift;
            @Lift.canceled -= instance.OnLift;
            @Intake.started -= instance.OnIntake;
            @Intake.performed -= instance.OnIntake;
            @Intake.canceled -= instance.OnIntake;
            @Stow.started -= instance.OnStow;
            @Stow.performed -= instance.OnStow;
            @Stow.canceled -= instance.OnStow;
        }

        public void RemoveCallbacks(IRobotActions instance)
        {
            if (m_Wrapper.m_RobotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRobotActions instance)
        {
            foreach (var item in m_Wrapper.m_RobotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RobotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RobotActions @Robot => new RobotActions(this);
    private int m_Controls1SchemeIndex = -1;
    public InputControlScheme Controls1Scheme
    {
        get
        {
            if (m_Controls1SchemeIndex == -1) m_Controls1SchemeIndex = asset.FindControlSchemeIndex("Controls 1");
            return asset.controlSchemes[m_Controls1SchemeIndex];
        }
    }
    private int m_Controls2SchemeIndex = -1;
    public InputControlScheme Controls2Scheme
    {
        get
        {
            if (m_Controls2SchemeIndex == -1) m_Controls2SchemeIndex = asset.FindControlSchemeIndex("Controls 2");
            return asset.controlSchemes[m_Controls2SchemeIndex];
        }
    }
    public interface IRobotActions
    {
        void OnTranslate(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnHigh(InputAction.CallbackContext context);
        void OnMid(InputAction.CallbackContext context);
        void OnLow(InputAction.CallbackContext context);
        void OnLift(InputAction.CallbackContext context);
        void OnIntake(InputAction.CallbackContext context);
        void OnStow(InputAction.CallbackContext context);
    }
}
